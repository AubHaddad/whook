// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`wrapHandlerWithAuthorization should fail with access_token disabled 1`] = `
{
  "authenticationChecks": [],
  "errorCode": "E_UNAUTHORIZED",
  "errorHeaders": {
    "www-authenticate": "Bearer realm="Auth"",
  },
  "errorParams": [],
  "httpCode": 401,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
    [
      "debug",
      "üîê - No authorization found, locking access!",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should fail with bad operation definition provided 1`] = `
{
  "authenticationChecks": [],
  "errorCode": "E_MISCONFIGURATION",
  "errorHeaders": {},
  "errorParams": [
    "Bearer",
    [],
    "noopHandler",
  ],
  "httpCode": 500,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should fail with no authorization at all for secured endpoints 1`] = `
{
  "authenticationChecks": [],
  "errorCode": "E_UNAUTHORIZED",
  "errorHeaders": {
    "www-authenticate": "Bearer realm="Auth"",
  },
  "errorParams": [],
  "httpCode": 401,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
    [
      "debug",
      "üîê - No authorization found, locking access!",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should fail with no operation definition provided 1`] = `
{
  "authenticationChecks": [],
  "errorCode": "E_OPERATION_REQUIRED",
  "errorHeaders": {},
  "errorParams": [],
  "httpCode": 500,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should fail with not supported auth 1`] = `
{
  "authenticationChecks": [],
  "errorCode": "E_UNKNOWN_AUTH_MECHANISM",
  "errorHeaders": {},
  "errorParams": [
    "Whatever yolo",
  ],
  "httpCode": 400,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should fail with unallowed mechanisms 1`] = `
{
  "authenticationChecks": [],
  "errorCode": "E_UNALLOWED_AUTH_MECHANISM",
  "errorHeaders": {},
  "errorParams": [
    "Basic yolo",
  ],
  "httpCode": 400,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should fail without right scopes 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "errorCode": "E_UNAUTHORIZED",
  "errorHeaders": {},
  "errorParams": [
    "",
    [
      "user",
      "admin",
    ],
  ],
  "httpCode": 403,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization should proxy authentication errors 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "errorCode": "E_UNAUTHORIZED",
  "errorHeaders": {
    "www-authenticate": "Bearer realm="Auth"",
  },
  "errorParams": [],
  "httpCode": 401,
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [],
}
`;

exports[`wrapHandlerWithAuthorization with authenticated and restricted endpoints should work with access tokens and good authentication check 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction] {
            "calls": [
              [
                "bearer",
                {
                  "hash": "yolo",
                },
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "access_token": "yolo",
        "authenticated": true,
        "authenticationData": {
          "applicationId": "abbacaca-abba-caca-abba-cacaabbacaca",
          "scope": "user,admin",
          "userId": 1,
        },
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "security": [
          {
            "bearerAuth": [
              "user",
              "admin",
            ],
          },
        ],
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "headers": {
      "X-Authenticated": "{"applicationId":"abbacaca-abba-caca-abba-cacaabbacaca","userId":1,"scope":"user,admin"}",
    },
    "status": 200,
  },
}
`;

exports[`wrapHandlerWithAuthorization with authenticated and restricted endpoints should work with bearer tokens and good authentication check 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction] {
            "calls": [
              [
                "bearer",
                {
                  "hash": "yolo",
                },
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "authenticated": true,
        "authenticationData": {
          "applicationId": "abbacaca-abba-caca-abba-cacaabbacaca",
          "scope": "user,admin",
          "userId": 1,
        },
        "authorization": "Bearer yolo",
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "security": [
          {
            "bearerAuth": [
              "user",
              "admin",
            ],
          },
        ],
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "headers": {
      "X-Authenticated": "{"applicationId":"abbacaca-abba-caca-abba-cacaabbacaca","userId":1,"scope":"user,admin"}",
    },
    "status": 200,
  },
}
`;

exports[`wrapHandlerWithAuthorization with authenticated but not restricted endpoints should work with Bearer tokens and good authentication check 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction] {
            "calls": [
              [
                "bearer",
                {
                  "hash": "yolo",
                },
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "authenticated": true,
        "authenticationData": {
          "applicationId": "abbacaca-abba-caca-abba-cacaabbacaca",
          "scope": "user,admin",
          "userId": 1,
        },
        "authorization": "Bearer yolo",
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "security": [
          {},
          {
            "bearerAuth": [
              "user",
              "admin",
            ],
          },
        ],
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "headers": {
      "X-Authenticated": "{"applicationId":"abbacaca-abba-caca-abba-cacaabbacaca","userId":1,"scope":"user,admin"}",
    },
    "status": 200,
  },
}
`;

exports[`wrapHandlerWithAuthorization with authenticated but not restricted endpoints should work with access tokens and good authentication check 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction] {
            "calls": [
              [
                "bearer",
                {
                  "hash": "yolo",
                },
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "access_token": "yolo",
        "authenticated": true,
        "authenticationData": {
          "applicationId": "abbacaca-abba-caca-abba-cacaabbacaca",
          "scope": "user,admin",
          "userId": 1,
        },
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "security": [
          {},
          {
            "bearerAuth": [
              "user",
              "admin",
            ],
          },
        ],
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "headers": {
      "X-Authenticated": "{"applicationId":"abbacaca-abba-caca-abba-cacaabbacaca","userId":1,"scope":"user,admin"}",
    },
    "status": 200,
  },
}
`;

exports[`wrapHandlerWithAuthorization with authenticated but not restricted endpoints should work with bearer tokens and good authentication check 1`] = `
{
  "authenticationChecks": [
    [
      "bearer",
      {
        "hash": "yolo",
      },
    ],
  ],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction] {
            "calls": [
              [
                "bearer",
                {
                  "hash": "yolo",
                },
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "authenticated": true,
        "authenticationData": {
          "applicationId": "abbacaca-abba-caca-abba-cacaabbacaca",
          "scope": "user,admin",
          "userId": 1,
        },
        "authorization": "bearer yolo",
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "security": [
          {},
          {
            "bearerAuth": [
              "user",
              "admin",
            ],
          },
        ],
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "headers": {
      "X-Authenticated": "{"applicationId":"abbacaca-abba-caca-abba-cacaabbacaca","userId":1,"scope":"user,admin"}",
    },
    "status": 200,
  },
}
`;

exports[`wrapHandlerWithAuthorization with authenticated but not restricted endpoints should work with no authentication at all 1`] = `
{
  "authenticationChecks": [],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
    [
      "debug",
      "üîì - Optionally authenticated enpoint detected, letting the call pass through!",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction],
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
            [
              "debug",
              "üîì - Optionally authenticated enpoint detected, letting the call pass through!",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "authenticated": false,
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "security": [
          {},
          {
            "bearerAuth": [
              "user",
              "admin",
            ],
          },
        ],
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "status": 200,
  },
}
`;

exports[`wrapHandlerWithAuthorization with unauthenticated endpoints should work 1`] = `
{
  "authenticationChecks": [],
  "logCalls": [
    [
      "debug",
      "üîê - Initializing the authorization wrapper for "getNoop".",
    ],
    [
      "debug",
      "üîì - Public endpoint detected, letting the call pass through!",
    ],
  ],
  "noopMockCalls": [
    [
      {
        "authentication": {
          "check": [MockFunction],
        },
        "log": [MockFunction] {
          "calls": [
            [
              "debug",
              "üîê - Initializing the authorization wrapper for "getNoop".",
            ],
            [
              "debug",
              "üîì - Public endpoint detected, letting the call pass through!",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
      },
      {
        "aParameter": 1,
        "authenticated": false,
      },
      {
        "method": "get",
        "operationId": "noopHandler",
        "parameters": [],
        "path": "/path",
        "responses": {
          "200": {
            "description": "Sucessfully did nothing!",
          },
        },
        "summary": "Does nothing.",
        "tags": [
          "system",
        ],
      },
    ],
  ],
  "response": {
    "status": 200,
  },
}
`;
